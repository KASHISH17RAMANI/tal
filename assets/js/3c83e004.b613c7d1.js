"use strict";(self.webpackChunktalawa_docs=self.webpackChunktalawa_docs||[]).push([[2593],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,k=u["".concat(i,".").concat(d)]||u[d]||g[d]||s;return n?a.createElement(k,o(o({ref:t},m),{},{components:n})):a.createElement(k,o({ref:t},m))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<s;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6801:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>g,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const s={id:"schemas",title:"Schemas"},o=void 0,l={unversionedId:"developers/talawa-api/schemas",id:"developers/talawa-api/schemas",title:"Schemas",description:"Type Structures (Schemas)",source:"@site/docs/developers/talawa-api/schemas.md",sourceDirName:"developers/talawa-api",slug:"/developers/talawa-api/schemas",permalink:"/tal/docs/developers/talawa-api/schemas",draft:!1,editUrl:"https://github.com/PalisadoesFoundation/talawa-docs/edit/develop/docs/developers/talawa-api/schemas.md",tags:[],version:"current",frontMatter:{id:"schemas",title:"Schemas"},sidebar:"someSidebar",previous:{title:"Mutations",permalink:"/tal/docs/developers/talawa-api/mutations"},next:{title:"Authentication",permalink:"/tal/docs/developers/talawa-api/authentication"}},i={},p=[{value:"Type Structures (Schemas)",id:"type-structures-schemas",level:2},{value:"Chats",id:"chats",level:3},{value:"Events",id:"events",level:3},{value:"Newsfeed",id:"newsfeed",level:3},{value:"Organization",id:"organization",level:3},{value:"Users",id:"users",level:3},{value:"Other schemas",id:"other-schemas",level:3},{value:"Queries",id:"queries",level:2},{value:"Fetch list of users",id:"fetch-list-of-users",level:3},{value:"Fetch list of user connections",id:"fetch-list-of-user-connections",level:3},{value:"Fetch list of organizations",id:"fetch-list-of-organizations",level:3},{value:"Fetch list of an organization&#39;s connections",id:"fetch-list-of-an-organizations-connections",level:3},{value:"Fetch list of events",id:"fetch-list-of-events",level:3},{value:"Fetch list of events by organizations",id:"fetch-list-of-events-by-organizations",level:3},{value:"Fetch list of events registered by user",id:"fetch-list-of-events-registered-by-user",level:3},{value:"Fetch single event",id:"fetch-single-event",level:3},{value:"Fetch registrants by event",id:"fetch-registrants-by-event",level:3},{value:"Get current user",id:"get-current-user",level:3},{value:"Fetch list of posts",id:"fetch-list-of-posts",level:3},{value:"Fetch the list of posts by organizations",id:"fetch-the-list-of-posts-by-organizations",level:3},{value:"Fetch the list of tasks by events",id:"fetch-the-list-of-tasks-by-events",level:3},{value:"Fetch list of tasks by users",id:"fetch-list-of-tasks-by-users",level:3},{value:"Fetch comments",id:"fetch-comments",level:3},{value:"Fetch comments by posts",id:"fetch-comments-by-posts",level:3},{value:"Fetch single post",id:"fetch-single-post",level:3},{value:"Fetch list of groups",id:"fetch-list-of-groups",level:3},{value:"Fetch list of direct chats",id:"fetch-list-of-direct-chats",level:3},{value:"Fetch list of direct chat messages",id:"fetch-list-of-direct-chat-messages",level:3},{value:"Fetch list of group chats.",id:"fetch-list-of-group-chats",level:3},{value:"Fetch list of group chat messages",id:"fetch-list-of-group-chat-messages",level:3},{value:"Fetch list of direct chat by userID.",id:"fetch-list-of-direct-chat-by-userid",level:3},{value:"Subscriptions",id:"subscriptions",level:2},{value:"Fetch list of messages sent to direct chat",id:"fetch-list-of-messages-sent-to-direct-chat",level:3},{value:"Fetch list of messages sent to group chat",id:"fetch-list-of-messages-sent-to-group-chat",level:3},{value:"Mutations",id:"mutations",level:2},{value:"Creates a new user with authentication data and tokens",id:"creates-a-new-user-with-authentication-data-and-tokens",level:3},{value:"Update the Auth Data whenever the user logs in",id:"update-the-auth-data-whenever-the-user-logs-in",level:3},{value:"Generate a new token for the user",id:"generate-a-new-token-for-the-user",level:3},{value:"Revoke the refresh token for the user inputted",id:"revoke-the-refresh-token-for-the-user-inputted",level:3},{value:"Create an event based on the data inputted.",id:"create-an-event-based-on-the-data-inputted",level:3},{value:"Remove the event based on the ID inputted",id:"remove-the-event-based-on-the-id-inputted",level:3},{value:"Register a user for an event",id:"register-a-user-for-an-event",level:3},{value:"Update the event information with the data inputted",id:"update-the-event-information-with-the-data-inputted",level:3},{value:"Creates a new organization based on the input provided",id:"creates-a-new-organization-based-on-the-input-provided",level:3},{value:"Update the organization information",id:"update-the-organization-information",level:3},{value:"Remove an organization based on the id inputted",id:"remove-an-organization-based-on-the-id-inputted",level:3},{value:"Create an admin for an organization based on the data provided",id:"create-an-admin-for-an-organization-based-on-the-data-provided",level:3},{value:"Removes the user from admin",id:"removes-the-user-from-admin",level:3},{value:"Removes an organization inputted from a user",id:"removes-an-organization-inputted-from-a-user",level:3},{value:"Remove multiple users from an organization",id:"remove-multiple-users-from-an-organization",level:3},{value:"Let the admin remove a post",id:"let-the-admin-remove-a-post",level:3},{value:"Let the admin remove an event",id:"let-the-admin-remove-an-event",level:3},{value:"Let the admin remove a group",id:"let-the-admin-remove-a-group",level:3},{value:"Create a new post",id:"create-a-new-post",level:3},{value:"Remove post based on the ID provided",id:"remove-post-based-on-the-id-provided",level:3},{value:"Set the post liked by the user",id:"set-the-post-liked-by-the-user",level:3},{value:"Unlike a post",id:"unlike-a-post",level:3},{value:"Create a comment in a post",id:"create-a-comment-in-a-post",level:3},{value:"Remove a comment based on the ID provided",id:"remove-a-comment-based-on-the-id-provided",level:3},{value:"set the comment liked by the user.",id:"set-the-comment-liked-by-the-user",level:3},{value:"Unlike the Comment",id:"unlike-the-comment",level:3},{value:"Create a new task",id:"create-a-new-task",level:3},{value:"Update task",id:"update-task",level:3},{value:"Remove task",id:"remove-task",level:3},{value:"Create a group",id:"create-a-group",level:3},{value:"Send a membership request to the current user",id:"send-a-membership-request-to-the-current-user",level:3},{value:"Accept membership request and add the user as a member to the organization",id:"accept-membership-request-and-add-the-user-as-a-member-to-the-organization",level:3},{value:"Reject the membership request for the user",id:"reject-the-membership-request-for-the-user",level:3},{value:"Block user",id:"block-user",level:3},{value:"Unblock user",id:"unblock-user",level:3},{value:"Add user profile image",id:"add-user-profile-image",level:3},{value:"Remove user profile image",id:"remove-user-profile-image",level:3},{value:"Add organization profile image",id:"add-organization-profile-image",level:3},{value:"Remove organization profile image",id:"remove-organization-profile-image",level:3},{value:"Create a direct chat between users",id:"create-a-direct-chat-between-users",level:3},{value:"Remove a direct chat between users",id:"remove-a-direct-chat-between-users",level:3},{value:"Send direct chat message",id:"send-direct-chat-message",level:3},{value:"Create a new group chat",id:"create-a-new-group-chat",level:3},{value:"Remove group chat",id:"remove-group-chat",level:3},{value:"Send message to group chat by user",id:"send-message-to-group-chat-by-user",level:3},{value:"Add user to group chat",id:"add-user-to-group-chat",level:3},{value:"Removes user from group chat",id:"removes-user-from-group-chat",level:3}],m={toc:p},u="wrapper";function g(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"type-structures-schemas"},"Type Structures (Schemas)"),(0,r.kt)("p",null,"These type structures and inputs have been used in the queries, mutations and subscriptions listed below."),(0,r.kt)("h3",{id:"chats"},"Chats"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    type DirectChat {\n        _id: ID!\n        users: [User!]!\n        messages: [DirectChatMessage]\n        creator: User!\n        organization: Organization!\n    }\n\n    type GroupChat {\n        _id: ID!\n        users: [User!]!\n        messages: [GroupChatMessage]\n        creator: User!\n        organization: Organization!\n    }\n\n    type GroupChatMessage {\n        _id: ID!\n        groupChatMessageBelongsTo: GroupChat!\n        sender: User!\n        createdAt: String!\n        messageContent: String!\n    }\n\n    type DirectChatMessage {\n        _id: ID!\n        directChatMessageBelongsTo: DirectChat!\n        sender: User!\n        receiver: User!\n        createdAt: String!\n        messageContent: String!\n    }\n\n    input createChatInput {\n        userIds: [ID!]!\n        organizationId: ID!\n    }\n\n    input createGroupChatInput {\n        userIds: [ID!]!\n        organizationId: ID!\n        title: String!\n    }\n")),(0,r.kt)("h3",{id:"events"},"Events"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    type Event {\n        _id: ID!\n        title:String!\n        ***Description***: String!\n        startDate: String!\n        endDate: String!\n        allDay: Boolean!\n        startTime: String\n        endTime: String\n        recurring: Boolean!\n        recurrance: String\n        attendees: String!\n        isPublic: Boolean!\n        isRegisterable: Boolean!\n        creator: User!\n        # registrants: [User]\n        admins(adminId: ID): [User]\n        organization: Organization\n        location: String\n        tasks: [Task]\n        isRegistered: Boolean\n    }\n\n    type Task {\n        _id: ID!\n        title: String!\n        ***Description***: String\n        event: Event!\n        creator: User!\n        createdAt: String!\n        deadline: String\n    }\n\n    input EventInput {\n        title:String!\n        ***Description***: String!\n        recurring: Boolean!\n        recurrance: String\n        attendees: String\n        isPublic: Boolean!\n        isRegisterable: Boolean!\n        organizationId: ID!\n        startDate: String!\n        endDate: String\n        allDay: Boolean!\n        startTime: String\n        endTime: String\n        location: String\n    }\n\n    input UpdateEventInput {\n        title:String\n        ***Description***: String\n        recurring: Boolean\n        recurrance: String\n        attendees: String\n        isPublic: Boolean\n        isRegisterable: Boolean\n        startDate: String\n        endDate: String\n        location: String\n        allDay: Boolean\n        startTime: String\n        endTime: String\n    }\n\n    input TaskInput {\n        title: String!\n        ***Description***: String\n        deadline: String\n    }\n\n\n    input UpdateTaskInput {\n        title: String\n        ***Description***: String\n        deadline: String\n    }\n\n    enum EventOrderByInput {\n        id_ASC\n        id_DESC\n        title_ASC\n        title_DESC\n        description_ASC\n        description_DESC\n        startDate_ASC\n        startDate_DESC\n        endDate_ASC\n        endDate_DESC\n        allDay_ASC\n        allDay_DESC\n        startTime_ASC\n        startTime_DESC\n        endTime_ASC\n        endTime_DESC\n        recurrance_ASC\n        recurrance_DESC\n        location_ASC\n        location_DESC\n    }\n\n    enum TaskOrderByInput {\n        id_ASC\n        id_DESC\n        title_ASC\n        title_DESC\n        description_ASC\n        description_DESC\n        createdAt_ASC\n        createdAt_DESC\n        deadline_ASC\n        deadline_DESC\n    }\n")),(0,r.kt)("h3",{id:"newsfeed"},"Newsfeed"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    type Post {\n        _id: ID\n        text: String!\n        title: String\n        createdAt: String\n        imageUrl: String\n        videoUrl:String\n        creator: User!\n        organization: Organization!\n        likedBy: [User]\n        comments: [Comment]\n        likeCount: Int\n        commentCount: Int\n    }\n\n    input PostInput {\n        _id: ID\n        text: String!\n        title: String\n        imageUrl: String\n        videoUrl:String\n        organizationId: ID!\n        pinned: Boolean\n    }\n\n    type Comment {\n        _id: ID\n        text: String!\n        createdAt: String\n        creator: User!\n        post: Post!\n        likedBy: [User]\n        likeCount: Int\n    }\n\n    input CommentInput {\n        text: String!\n    }\n\n    enum PostOrderByInput {\n        id_ASC\n        id_DESC\n        text_ASC\n        text_DESC\n        title_ASC\n        title_DESC\n        createdAt_ASC\n        createdAt_DESC\n        imageUrl_ASC\n        imageUrl_DESC\n        videoUrl_ASC\n        videoUrl_DESC\n        likeCount_ASC\n        likeCount_DESC\n        commentCount_ASC\n        commentCount_DESC\n    }\n")),(0,r.kt)("h3",{id:"organization"},"Organization"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    type Organization {\n        image:String\n        _id: ID!\n        name:String!\n        ***Description***: String!\n        isPublic: Boolean!\n        creator: User!\n        members: [User]\n        admins(adminId: ID): [User]\n        membershipRequests: [MembershipRequest]\n        blockedUsers: [User]\n        visibleInSearch: Boolean!\n        apiUrl:String!\n        pinnedPosts: [Post]\n    }\n\n    input OrganizationInput {\n        name:String!\n        ***Description***: String!\n        attendees: String\n        isPublic: Boolean!\n        visibleInSearch: Boolean!\n        apiUrl:String\n    }\n\n    input UpdateOrganizationInput {\n        name:String\n        ***Description***: String\n        isPublic: Boolean\n        visibleInSearch: Boolean\n    }\n\n    input UserAndOrganizationInput{\n        organizationId: ID!, userId: ID!\n    }\n\n    input MultipleUsersAndOrganizationInput {\n        organizationId: ID!,\n        userIds: [ID!]!\n    }\n\n    type MembershipRequest {\n        _id: ID!\n        user: User!\n        organization: Organization!\n    }\n\n    input OrganizationWhereInput {\n        id: ID\n        id_not: ID\n        id_in: [ID!]\n        id_not_in: [ID!]\n        id_contains: ID\n        id_starts_with: ID\n\n        name: String\n        name_not: String\n        name_in: [String!]\n        name_not_in: [String!]\n        name_contains: String\n        name_starts_with: String\n\n        ***Description***: String\n        description_not: String\n        description_in: [String!]\n        description_not_in: [String!]\n        description_contains: String\n        description_starts_with: String\n\n        apiUrl: String\n        apiUrl_not: String\n        apiUrl_in: [String!]\n        apiUrl_not_in: [String!]\n        apiUrl_contains: String\n        apiUrl_starts_with: String\n\n        visibleInSearch: Boolean\n\n        isPublic: Boolean\n    }\n\n    enum OrganizationOrderByInput {\n        id_ASC\n        id_DESC\n        name_ASC\n        name_DESC\n        description_ASC\n        description_DESC\n        apiUrl_ASC\n        apiUrl_DESC\n    }\n")),(0,r.kt)("h3",{id:"users"},"Users"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    input LoginInput {\n        email:String!,\n        password:String!\n    }\n\n    type AuthData {\n        user: User!,\n        accessToken: String!\n        refreshToken: String!\n    }\n\n    type ExtendSession {\n        accessToken: String!\n        refreshToken: String!\n    }\n\n    type User {\n        tokenVersion: Int!\n        _id: ID!\n        firstName: String!\n        lastName: String!\n        email: String!\n        createdOrganizations: [Organization]\n        joinedOrganizations: [Organization]\n        createdEvents: [Event]\n        registeredEvents: [Event]\n        eventAdmin: [Event]\n        adminFor: [Organization]\n        membershipRequests: [MembershipRequest]\n        organizationsBlockedBy: [Organization]\n        image: String\n        organizationUserBelongsTo: Organization\n    }\n\n    input UserInput {\n        firstName: String!\n        lastName: String!\n        email: String!\n        password: String!\n        organizationUserBelongsToId: ID\n    }\n\n    input UserWhereInput {\n        id: ID\n        id_not: ID\n        id_in: [ID!]\n        id_not_in: [ID!]\n        id_contains: ID\n        id_starts_with: ID\n\n        firstName: String\n        firstName_not: String\n        firstName_in: [String!]\n        firstName_not_in: [String!]\n        firstName_contains: String\n        firstName_starts_with: String\n\n        lastName: String\n        lastName_not: String\n        lastName_in: [String!]\n        lastName_not_in: [String!]\n        lastName_contains: String\n        lastName_starts_with: String\n\n        email: String\n        email_not: String\n        email_in: [String!]\n        email_not_in: [String!]\n        email_contains: String\n        email_starts_with: String\n\n        admin_for: ID\n\n        event_title_contains: String\n    }\n\n    enum UserOrderByInput {\n        id_ASC\n        id_DESC\n        firstName_ASC\n        firstName_DESC\n        lastName_ASC\n        lastName_DESC\n        email_ASC\n        email_DESC\n    }\n")),(0,r.kt)("h3",{id:"other-schemas"},"Other schemas"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    type Message {\n        _id: ID!\n        text: String\n        createdAt: String\n        imageUrl: String\n        videoUrl:String\n        creator: User\n    }\n\n    input GroupInput {\n        title: String\n        ***Description***:String\n        organizationId: ID!\n    }\n\n    type Group {\n        _id: ID\n        title: String\n        ***Description***:String\n        createdAt:String\n        organization: Organization!\n        admins: [User]\n    }\n")),(0,r.kt)("h2",{id:"queries"},"Queries"),(0,r.kt)("p",null,"GraphQL queries can traverse related objects and their fields, letting clients fetch lots of related data in one request, instead of making several roundtrips as one would need in a classic REST architecture."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"\ntype Query {\n    users(id: ID, orderBy: UserOrderByInput): [User]\n    usersConnection(where: UserWhereInput, first: Int, skip: Int, orderBy: UserOrderByInput): [User]!\n    organizations(id: ID, orderBy: OrganizationOrderByInput): [Organization]\n    organizationsConnection(where: OrganizationWhereInput, first: Int, skip: Int, orderBy: OrganizationOrderByInput): [Organization]!\n    events(id: ID, orderBy: EventOrderByInput): [Event]\n    eventsByOrganization(id: ID, orderBy: EventOrderByInput): [Event]\n    registeredEventsByUser(id: ID, orderBy: EventOrderByInput): [Event]\n    event(id: ID): Event\n    registrantsByEvent(id: ID): [User]\n    me:User!\n    posts(orderBy: PostOrderByInput): [Post]\n    postsByOrganization(id: ID!, orderBy: PostOrderByInput): [Post]\n    tasksByEvent(id: ID!, orderBy: TaskOrderByInput): [Task]\n    tasksByUser(id: ID!, orderBy: TaskOrderByInput): [Task]\n    comments: [Comment]\n    commentsByPost(id: ID!): [Comment]\n    post(id: ID): Post\n    groups: [Group]\n    directChats: [DirectChat]\n    directChatMessages: [DirectChatMessage]\n    directChatsByUserID(id:ID) :[DirectChat]\n    groupChats: [GroupChat]\n    groupChatMessages: [GroupChatMessage]\n}\n")),(0,r.kt)("h3",{id:"fetch-list-of-users"},"Fetch list of users"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    users(\n        id: ID\n        orderBy: UserOrderByInput\n    ): [User]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It fetches the list of users."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"id: ID - This lets you identify an object(user) uniquely."),(0,r.kt)("li",{parentName:"ol"},"orderBy: UserOrderByInput - Filters the data in an ordered manner according to the input provided.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": User"),(0,r.kt)("p",null,"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"\nquery{\n    users(\n        id:<id>\n        orderBy:id_ASC\n    ){\n        firstName\n        lastName\n    }\n}\n")),(0,r.kt)("h3",{id:"fetch-list-of-user-connections"},"Fetch list of user connections"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"\n    usersConnection(\n        where: UserWhereInput\n        first: Int\n        skip: Int\n        orderBy: UserOrderByInput\n    ): [User]!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It fetches the list of user connections."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"where: UserWhereInput - It filters the data by checking for some specific attributes."),(0,r.kt)("li",{parentName:"ol"},"first: 4 - It fetches the first 4 records."),(0,r.kt)("li",{parentName:"ol"},"skip: 2 - It skips the first 2 records."),(0,r.kt)("li",{parentName:"ol"},"orderBy: UserOrderByInput - Filters the data in an ordered manner according to the input provided.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": User!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'    query{\n        usersConnection(\n        where:{firstName_contains:"a"}\n        first: 2\n        skip: 0\n        orderBy: id_ASC\n        ){\n            firstName\n            lastName\n        }\n    }\n')),(0,r.kt)("h3",{id:"fetch-list-of-organizations"},"Fetch list of organizations"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    organizations(\n        id: ID\n        orderBy: OrganizationOrderByInput\n    ): [Organization]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It fetches the list of organizations."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"id: ID - This lets you identify an object(organization) uniquely."),(0,r.kt)("li",{parentName:"ol"},"orderBy: OrganizationOrderByInput - Filters the data in an ordered manner according to the input provided.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Organization"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    query{\n        organizations(\n        orderBy: id_ASC\n        ){\n        name\n        }\n    }\n")),(0,r.kt)("h3",{id:"fetch-list-of-an-organizations-connections"},"Fetch list of an organization's connections"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    organizationsConnection(\n        where: OrganizationWhereInput\n        first: Int\n        skip: Int\n        orderBy: OrganizationOrderByInput\n    ): [Organization]!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It fetches the list of the organization's connections."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"where: OrganizationWhereInput - It filters the data by checking for some specific attributes."),(0,r.kt)("li",{parentName:"ol"},"first: 3 - It fetches the first 3 records."),(0,r.kt)("li",{parentName:"ol"},"skip: 0 - It skips the first 0 records."),(0,r.kt)("li",{parentName:"ol"},"orderBy: OrganizationOrderByInput - Filters the data in an ordered manner according to the input provided.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Organization"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'    query{\n        organizationsConnection(\n        where: {description_not:"abc"}\n        first: 1\n        skip: 1\n        orderBy: id_ASC\n        ){\n        name\n        }\n    }\n')),(0,r.kt)("h3",{id:"fetch-list-of-events"},"Fetch list of events"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"events(\nid: ID\norderBy: EventOrderByInput\n): [Event]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It fetches the list of events."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"id: ID - This lets you identify an object(event) uniquely."),(0,r.kt)("li",{parentName:"ol"},"orderBy: EventOrderByInput - Filters the data in an ordered manner according to the input provided.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Event"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    query{\n        events(\n        orderBy: id_ASC\n        ){\n            title\n        }\n    }\n")),(0,r.kt)("h3",{id:"fetch-list-of-events-by-organizations"},"Fetch list of events by organizations"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    eventsByOrganization(\n        id: ID\n        orderBy: EventOrderByInput\n        ): [Event]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It fetches the list of events by organizations."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"id: ID - This lets you identify an object(event) uniquely."),(0,r.kt)("li",{parentName:"ol"},"orderBy: EventOrderByInput - Filters the data in an ordered manner according to the input provided.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Event"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    query{\n        eventsByOrganization(\n        orderBy: id_ASC\n        ){\n            title\n            description\n        }\n    }\n")),(0,r.kt)("h3",{id:"fetch-list-of-events-registered-by-user"},"Fetch list of events registered by user"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"registeredEventsByUser(\nid: ID\norderBy: EventOrderByInput\n): [Event]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It fetches the list of events registered by user."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"id: ID - This lets you identify an object(event) uniquely."),(0,r.kt)("li",{parentName:"ol"},"orderBy: EventOrderByInput - Filters the data in an ordered manner according to the input provided.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Event"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    query{\n        registeredEventsByUser(\n        orderBy: title_ASC\n        )\n        {\n            title\n            description\n        }\n    }\n")),(0,r.kt)("h3",{id:"fetch-single-event"},"Fetch single event"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"event(\nid: ID\n): Event\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It fetches a single event."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"id: ID - This lets you identify an object(event) uniquely.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Event"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    query{\n        event(\n            id:<id>\n        ){\n         title\n        }\n    }\n")),(0,r.kt)("h3",{id:"fetch-registrants-by-event"},"Fetch registrants by event"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    registrantsByEvent(\n        id: ID\n    ): [User]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It fetches the registrants by event."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"id: ID - This lets you identify an object(event/registrant) uniquely.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Event"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"query{\n    registrantsByEvent(\n        id: <id>\n    ){\n        firstName\n    }\n    }\n")),(0,r.kt)("h3",{id:"get-current-user"},"Get current user"),(0,r.kt)("p",null,"me: User!"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It gives us the current user."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":\nnone"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": User"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    query{\n        me{\n            firstName\n            lastName\n        }\n    }\n")),(0,r.kt)("h3",{id:"fetch-list-of-posts"},"Fetch list of posts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    posts(\n        orderBy: PostOrderByInput\n    ): [Post]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It fetches the list of posts"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"orderBy: PostOrderByInput - Filters the data in an ordered manner according to the input provided.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Post"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    query{\n        posts(\n            orderBy:id_ASC\n        ){\n            title\n            imageUrl\n        }\n    }\n")),(0,r.kt)("h3",{id:"fetch-the-list-of-posts-by-organizations"},"Fetch the list of posts by organizations"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    postsByOrganization(\n        id: ID!\n        orderBy: PostOrderByInput\n    ): [Post]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It fetches the list of posts by organizations."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"id: ID! - This lets you identify an object(post) uniquely. The ! signifies that the object passed is non-nullable or NOT NULL."),(0,r.kt)("li",{parentName:"ol"},"orderBy: PostOrderByInput - Filters the data in an ordered manner according to the input provided.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Post"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"query{\n    postsByOrganization(\n        id: <id>\n        orderBy: id_ASC\n        ){\n            createdAt\n        }\n    }\n")),(0,r.kt)("h3",{id:"fetch-the-list-of-tasks-by-events"},"Fetch the list of tasks by events"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"tasksByEvent(\nid: ID!\norderBy: TaskOrderByInput\n): [Task]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It fetches the list of tasks by events."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"id: ID! - This lets you identify an object(task/event) uniquely. The ! signifies that the object passed is non-nullable or NOT NULL."),(0,r.kt)("li",{parentName:"ol"},"orderBy: PostOrderByInput - Filters the data in an ordered manner according to the input provided.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Task"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    query{\n        tasksByEvent(\n            id: <id>\n            orderBy: id_ASC\n    ){\n        title\n    }\n    }\n")),(0,r.kt)("h3",{id:"fetch-list-of-tasks-by-users"},"Fetch list of tasks by users"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"tasksByUser(\nid: ID!\norderBy: TaskOrderByInput\n): [Task]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It fetches the list of tasks by users."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"id: ID! - This lets you identify an object(task/user) uniquely. The ! signifies that the object passed is non-nullable or NOT NULL."),(0,r.kt)("li",{parentName:"ol"},"orderBy: PostOrderByInput - Filters the data in an ordered manner according to the input provided.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Task"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    query{\n        tasksByUser(\n        id: <id>\n        orderBy: id_ASC\n    ){\n        event\n    }\n    }\n")),(0,r.kt)("h3",{id:"fetch-comments"},"Fetch comments"),(0,r.kt)("p",null,"comments: ","[Comment]"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It fetches the comments."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":\nnone"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Comment"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    query{\n        comments{\n            text\n            creator{\n                firstName\n            }\n        }\n    }\n")),(0,r.kt)("h3",{id:"fetch-comments-by-posts"},"Fetch comments by posts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    commentsByPost(\n        id: ID!\n    ): [Comment]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It fetches the comments by posts."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"id: ID! - This lets you identify an object(comment/post) uniquely. The ! signifies that the object passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Comment"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    query{\n        commentsByPost(\n            id: <id>\n    ){\n        text\n        creator{\n            firstName\n        }\n    }\n    }\n")),(0,r.kt)("h3",{id:"fetch-single-post"},"Fetch single post"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    post(\n        id: ID\n    ): Post\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": it fetches a single post."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"id: ID - his lets you identify an object(post) uniquely.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Post"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    query{\n        post(\n            id: <id>\n        ){\n            text\n            title\n        }\n    }\n")),(0,r.kt)("h3",{id:"fetch-list-of-groups"},"Fetch list of groups"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    groups: [Group]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It fetches the list of groups."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":\nnone"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Group"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    query{\n        groups{\n            title\n            description\n        }\n    }\n")),(0,r.kt)("h3",{id:"fetch-list-of-direct-chats"},"Fetch list of direct chats"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    directChats: [DirectChat]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It fetches the list of direct chats."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":\nnone"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": DirectChat"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    query{\n        directChats{\n            users{\n                firstName\n            }\n            messages{\n                messageContent\n            }\n        }\n    }\n")),(0,r.kt)("h3",{id:"fetch-list-of-direct-chat-messages"},"Fetch list of direct chat messages"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"directChatMessages: [DirectChatMessage]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It fetches the list of direct chat messages."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":\nnone"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": DirectChatMessage"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    query{\n        directChatMessages{\n            sender{\n                firstName\n            }\n            receiver{\n                firstName\n            }\n            createdAt\n        }\n    }\n")),(0,r.kt)("h3",{id:"fetch-list-of-group-chats"},"Fetch list of group chats."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"groupChats: [GroupChat]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It fetches the list of group chats."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":\nnone"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": GroupChat"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    query{\n        groupChats{\n            users{\n                firstName\n            }\n            messages{\n                createdAt\n            }\n            creator{\n                email\n            }\n        }\n    }\n")),(0,r.kt)("h3",{id:"fetch-list-of-group-chat-messages"},"Fetch list of group chat messages"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    groupChatMessages: [GroupChatMessage]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It fetches the list of group chat messages."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":\nnone"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": GroupChatMessages"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    query{\n        groupChatMessages{\n            sender{\n                firstName\n            }\n            createdAt\n            messageContent\n        }\n    }\n")),(0,r.kt)("h3",{id:"fetch-list-of-direct-chat-by-userid"},"Fetch list of direct chat by userID."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"directChatsByUserID: [DirectChat]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It fetches the list of direct chat by userID."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"id: ID -lets you identify an object(user) uniquely.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": DirectChat"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    query{\n        directChats(\n            id: <id>\n        )\n        {\n            users{\n                firstName\n            }\n            messages{\n                messageContent\n            }\n        }\n    }\n")),(0,r.kt)("h2",{id:"subscriptions"},"Subscriptions"),(0,r.kt)("p",null,"Like queries, subscriptions enable you to fetch data. Unlike queries, subscriptions are long-lasting operations that can change their result over time. They can maintain an active connection to your GraphQL server (most commonly via WebSocket), enabling the server to push updates to the subscription's result."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    type Subscription {\n        messageSentToDirectChat: DirectChatMessage\n        messageSentToGroupChat: GroupChatMessage\n    }\n")),(0,r.kt)("h3",{id:"fetch-list-of-messages-sent-to-direct-chat"},"Fetch list of messages sent to direct chat"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    messageSentToDirectChat: DirectChatMessage\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It fetches the list of messages sent to direct chat."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":\nnone"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": DirectChatMessage"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    subscription{\n        messageSentToDirectChat{\n            sender{\n                firstName\n            }\n            receiver{\n                firstName\n            }\n            createdAt\n        }\n    }\n")),(0,r.kt)("h3",{id:"fetch-list-of-messages-sent-to-group-chat"},"Fetch list of messages sent to group chat"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    messageSentToGroupChat: GroupChatMessage\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It fetches the list of messages sent to group chat."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":\nnone"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": GroupChatMessage"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    subscription{\n        messageSentToGroupChat{\n            groupChatMessageBelongsTo{\n                creator{\n                    firstName\n                }\n            }\n            sender{\n                firstName\n            }\n            messageContent\n        }\n    }\n")),(0,r.kt)("h2",{id:"mutations"},"Mutations"),(0,r.kt)("p",null,"Mutation queries modify data in the data store and returns a value. It can be used to insert, update, or delete data. Mutations are defined as a part of the schema."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type Mutation {\n\n    signUp(data: UserInput!, file:Upload): AuthData!\n    login(data: LoginInput!): AuthData!\n    refreshToken(refreshToken: String!) : ExtendSession!\n    revokeRefreshTokenForUser(userId: String!) : Boolean!\n\n    createEvent(data: EventInput): Event!\n    removeEvent(id: ID!): Event!\n    registerForEvent(id: ID!): Event!\n    updateEvent(id:ID!, data: UpdateEventInput) : Event!\n    createOrganization(data: OrganizationInput, file:Upload): Organization!\n    updateOrganization(id:ID!, data: UpdateOrganizationInput) : Organization!\n\n    removeOrganization(id: ID!) : User!\n\n    createAdmin (data: UserAndOrganizationInput!) : User!\n    removeAdmin (data: UserAndOrganizationInput!) : User!\n    joinPublicOrganization (organizationId: ID!) : User!\n    leaveOrganization (organizationId: ID!) : User!\n\n    removeMember (data: MultipleUsersAndOrganizationInput!) : Organization!\n\n    adminRemoveEvent(eventId: ID!): Event!\n    adminRemoveGroup(groupId:ID!):Message!\n\n    createPost(data: PostInput!, file: Upload): Post\n    removePost(id:ID!): Post\n    likePost(id:ID!): Post\n    unlikePost(id:ID!): Post\n    togglePostPin(id:ID!): Post\n\n    createComment(postId:ID!, data: CommentInput!): Comment\n    removeComment(id:ID!): Comment\n    likeComment(id:ID!): Comment\n    unlikeComment(id:ID!): Comment\n\n    createTask(data: TaskInput, eventId: ID!): Task!\n    updateTask(id:ID!, data: UpdateTaskInput) : Task\n    removeTask(id: ID!) : Task\n\n    createGroup(data: GroupInput!): Group!\n\n    sendMembershipRequest(organizationId: ID!) : MembershipRequest!\n    acceptMembershipRequest(membershipRequestId: ID!): MembershipRequest!\n    rejectMembershipRequest(membershipRequestId: ID!): MembershipRequest!\n    cancelMembershipRequest(membershipRequestId: ID!) : MembershipRequest!\n\n    blockUser(organizationId: ID!, userId: ID!) : User!\n    unblockUser(organizationId: ID!, userId:ID!) : User!\n\n    addUserImage(file: Upload!): User!\n    removeUserImage: User!\n    addOrganizationImage(file: Upload!, organizationId: String!): Organization!\n    removeOrganizationImage(organizationId: String!): Organization!\n\n    createDirectChat(data: createChatInput): DirectChat!\n    removeDirectChat(chatId: ID!, organizationId: ID!) : DirectChat!\n    sendMessageToDirectChat(chatId: ID!, messageContent: String!): DirectChatMessage!\n\n    createGroupChat(data: createGroupChatInput): GroupChat!\n    removeGroupChat(chatId: ID!): GroupChat!\n    sendMessageToGroupChat(chatId: ID!, messageContent: String!): GroupChatMessage!\n    addUserToGroupChat(userId: ID!, chatId: ID!): GroupChat!\n    removeUserFromGroupChat(userId: ID!, chatId: ID!): GroupChat!\n\n}\n")),(0,r.kt)("h3",{id:"creates-a-new-user-with-authentication-data-and-tokens"},"Creates a new user with authentication data and tokens"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    signUp(\n        data: UserInput!\n        file: Upload\n    ): AuthData!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It creates a new user with authentication data and tokens."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"data: UserInput! - It contains all the data that is needed to create the user object. The ! signifies that the object passed is non-nullable or NOT NULL."),(0,r.kt)("li",{parentName:"ol"},"file: Upload - It contains a file that is needed to create a user.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": AuthData!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'    mutation{\n        signUp(data:{\n            firstName:"abc"\n            lastName: "def"\n            email: "wef@xyz.com"\n            password:"sdvsv"\n            }){\n            user{\n                firstName\n            }\n        }\n    }\n')),(0,r.kt)("h3",{id:"update-the-auth-data-whenever-the-user-logs-in"},"Update the Auth Data whenever the user logs in"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    login(\n        data: LoginInput!\n    ): AuthData!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It updates the Auth Data whenever the user logs in."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"data: LoginInput! - It contains all the data that is needed to update the data. The ! signifies that the object passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": AuthData!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'    mutation{\n        login(data:{\n            email: "wef@xyz.com"\n            password:"sdvsv"\n        }){\n        user{\n        firstName\n        }\n        }\n    }\n')),(0,r.kt)("h3",{id:"generate-a-new-token-for-the-user"},"Generate a new token for the user"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    refreshToken(\n         refreshToken: String!\n    ): ExtendSession!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It generates a new token for the user."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"refreshToken: String! - It contains the Refresh Token. The ! signifies that the value passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": ExtendSession!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'    mutation{\n        refreshToken(refreshToken:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlblZlcnNpb24iOjAsInVzZXJJ9mD\\_\\_c77yU"\n        ){\n        accessToken\n        refreshToken\n        }\n    }\n')),(0,r.kt)("h3",{id:"revoke-the-refresh-token-for-the-user-inputted"},"Revoke the refresh token for the user inputted"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"revokeRefreshTokenForUser(\nuserId: String!\n): Boolean!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It revokes the refresh token for the user inputted."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"userId: String! - It contains userId which identifies the user.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Boolean!"),(0,r.kt)("p",null,"The returned value is true if the user is found else false.\nThe ! signifies that the value returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'    mutation{\n        revokeRefreshTokenForUser(userId:"6059ede189334c0242145e46")\n    }\n')),(0,r.kt)("h3",{id:"create-an-event-based-on-the-data-inputted"},"Create an event based on the data inputted."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"createEvent(\ndata: EventInput\n): Event!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It creates an event based on the data inputted."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"data: EventInput - It contains the data needed to create an event.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Event!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'    mutation{\n        createEvent(\n        data:{\n            title:"abc"\n            Description:"xyz"\n            recurring: false\n            isPublic: true\n            isRegisterable: true\n            organizationId:"dclkn123"\n            startDate: "2021-03-29"\n            allDay: true\n        }\n        ){\n            title\n            description\n        }\n    }\n')),(0,r.kt)("h3",{id:"remove-the-event-based-on-the-id-inputted"},"Remove the event based on the ID inputted"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    removeEvent(\n        id: ID!\n    ): Event!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It removes the event based on the ID inputted."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"id: ID! - It helps to identify a unique event which needs to be removed. The ! signifies that the value passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Event!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    mutation{\n        removeEvent(id:<id>){\n        title\n        description\n        }\n    }\n")),(0,r.kt)("h3",{id:"register-a-user-for-an-event"},"Register a user for an event"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    registerForEvent(\n        id: ID!\n    ): Event!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It registers a user for an event."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"id: ID! - It helps to identify a unique user which needs to be registered. The ! signifies that the value passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Event!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    mutation{\n        registerForEvent(id:<id>){\n        title\n        description\n        }\n    }\n")),(0,r.kt)("h3",{id:"update-the-event-information-with-the-data-inputted"},"Update the event information with the data inputted"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    updateEvent(\n    id: ID!\n    data: UpdateEventInput\n    ): Event!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It updates the event information with the data inputted."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"id: ID! - It helps to identify a unique event which needs to be updated. The ! signifies that the value passed is non-nullable or NOT NULL."),(0,r.kt)("li",{parentName:"ol"},"data: UpdateEventInput - It contains the data that needs to be updated.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Event!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'    mutation{\n        updateEvent(\n        id:<id>\n        data: {\n        title:"Xyz"\n        }\n        ){\n        title\n        }\n    }\n')),(0,r.kt)("h3",{id:"creates-a-new-organization-based-on-the-input-provided"},"Creates a new organization based on the input provided"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    createOrganization(\n        data: OrganizationInput\n        file: Upload\n    ): Organization!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It creates a new organization based on the input provided."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"data: OrganizationInput - It contains the data that need to be inputted."),(0,r.kt)("li",{parentName:"ol"},"file: Upload - It is the file that need to be uploaded.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Organization!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'    mutation{\n        createOrganization(\n        data:{\n        name:"pj1"\n        Description: "abcd"\n        isPublic: true\n        visibleInSearch:true\n        }\n        ){\n        \\_id\n        name\n        description\n        }\n    }\n')),(0,r.kt)("h3",{id:"update-the-organization-information"},"Update the organization information"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    updateOrganization(\n        id: ID!\n        data: UpdateOrganizationInput\n    ): Organization!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It updates the organization information."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"id: ID! - It helps to identify a unique organization which needs to be updated. The ! signifies that the value passed is non-nullable or NOT NULL."),(0,r.kt)("li",{parentName:"ol"},"data: pdateOrganizationInput - It contains the data that need to be updated.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Organization!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'    mutation{\n        updateOrganization(\n        id: <id>\n        data:{\n        name: "xyz"\n        ***Description***: "abc"\n        }\n        ){\n        \\_id\n        name\n        description\n        }\n    }\n')),(0,r.kt)("h3",{id:"remove-an-organization-based-on-the-id-inputted"},"Remove an organization based on the id inputted"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    removeOrganization(\n    id: ID!\n    ): User!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It removes an organization based on the id inputted."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"id: ID! - It helps to identify a unique organization which needs to be deleted . The ! signifies that the value passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": User!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    mutation{\n        removeOrganization(id:<id>){\n            organizationsBlockedBy{\n                name\n            }\n        }\n    }\n")),(0,r.kt)("h3",{id:"create-an-admin-for-an-organization-based-on-the-data-provided"},"Create an admin for an organization based on the data provided"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    createAdmin(\n        data: UserAndOrganizationInput!\n    ): User!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It creates an admin for an organization based on the data provided."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"data: UserAndOrganizationInput! - It contains the user data who needs to be made the admin and the org data. The ! signifies that the object passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": User!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    mutation{\n        createAdmin(\n            data:{\n            organizationId: <o_id>\n            userId: <u_id>\n            }\n            ){\n            adminFor\n        }\n    }\n")),(0,r.kt)("h3",{id:"removes-the-user-from-admin"},"Removes the user from admin"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    removeAdmin(\n        data: UserAndOrganizationInput!\n    ): User!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It removes the user from admin."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"data: UserAndOrganizationInput! - It contains the user data who needs to be removed as the admin and the org data. The ! signifies that the object passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": User!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    mutation{\n        removeAdmin(\n        data:{\n            organizationId: <o_id>\n            userId: <u_id>\n        }){\n            firstName\n        }\n    }\n")),(0,r.kt)("h1",{id:"adds-organization-to-user"},"Adds organization to user"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    joinPublicOrganization(\n        organizationId: ID!\n    ): User!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It adds organization to user."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"organizationId: ID! - It helps to identify a unique organization which needs to be joined. The ! signifies that the value passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": User!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    mutation{\n        joinPublicOrganization(organizationId:<o_id>){\n        \\_id\n        }\n    }\n")),(0,r.kt)("h3",{id:"removes-an-organization-inputted-from-a-user"},"Removes an organization inputted from a user"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    leaveOrganization(\n        organizationId: ID!\n    ): User!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It removes an organization inputted from a user."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"organizationId: ID! - It helps to identify a unique organization which needs to be removed from a user. The ! signifies that the value passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": User!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    mutation{\n        leaveOrganization(organizationId:<o_id>){\n            joinedOrganizations\n        }\n    }\n")),(0,r.kt)("h3",{id:"remove-multiple-users-from-an-organization"},"Remove multiple users from an organization"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    removeMember(\n        data: MultipleUsersAndOrganizationInput!\n    ): Organization!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It removes multiple users from an organization."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"data: MultipleUsersAndOrganizationInput! - It contains data for multiple users that need to be removed and the org data from which they are removed. The ! signifies that the data passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Organization!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'    mutation{\n        removeMember(\n            data:{\n                organizationId:"<o_id>"\n                userIds: [<id_1>,<id_2>]\n            }\n        ){\n        name\n        }\n    }\n')),(0,r.kt)("h3",{id:"let-the-admin-remove-a-post"},"Let the admin remove a post"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    adminRemovePost(\n        organizationId: ID!\n        postId: ID!\n    ): Post!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It lets the admin delete the post."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"organizationId: ID! - It helps to identify a unique organization in which post needs to be removed by the admin. The ! signifies that the value passed is non-nullable or NOT NULL."),(0,r.kt)("li",{parentName:"ol"},"postId: ID! - It helps to identify a unique post which needs to be removed by the admin. The ! signifies that the value passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Post!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    mutation{\n        adminRemovePost(\n            organizationId: <o_id>\n            postId: <p_id>\n        ){\n            text\n        }\n    }\n")),(0,r.kt)("h3",{id:"let-the-admin-remove-an-event"},"Let the admin remove an event"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    adminRemoveEvent(\n        eventId: ID!\n    ): Event!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It lets the admin remove an event."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"eventId: ID! - It helps to identify a unique event which needs to be removed by the admin. The ! signifies that the value passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Event!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    mutation{\n        adminRemoveEvent(\n            eventId: <e_id>\n        ){\n            title\n        }\n    }\n")),(0,r.kt)("h3",{id:"let-the-admin-remove-a-group"},"Let the admin remove a group"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    adminRemoveGroup(\n        groupId: ID!\n    ): Message!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It lets the admin remove a group."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"groupId: ID! - It helps to identify a unique group which needs to be removed by the admin. The ! signifies that the value passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Message!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    mutation{\n        adminRemoveGroup(\n            groupId: <g_id>\n        ){\n            text\n        }\n    }\n")),(0,r.kt)("h3",{id:"create-a-new-post"},"Create a new post"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    createPost(\n        data: PostInput!\n        file: Upload\n    ): Post\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It creates a new post."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"data: PostInput! - It contains data for the post that needs to be created. The ! signifies that the data passed is non-nullable or NOT NULL."),(0,r.kt)("li",{parentName:"ol"},"file: Upload - It is the file that need to be uploaded.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Post"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'    mutation{\n    createPost(\n        data:{\n            text:"adas"\n            organizationId: <o_id>\n        }\n        ){\n            text\n        }\n    }\n')),(0,r.kt)("h3",{id:"remove-post-based-on-the-id-provided"},"Remove post based on the ID provided"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    removePost(\n        id: ID!\n    ): Post\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It removes the post based on the ID provided."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"id: ID! - It helps to identify a unique post which needs to be removed. The ! signifies that the value passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Post"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    mutation{\n        removePost(\n            id: <p_id>\n        ){\n            \\_id\n            text\n        }\n    }\n")),(0,r.kt)("h3",{id:"set-the-post-liked-by-the-user"},"Set the post liked by the user"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    likePost(\n        id: ID!\n    ): Post\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It sets the post liked by the user."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"id: ID! - It helps to identify a unique post which needs to be liked. The ! signifies that the value passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Post"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    mutation{\n        removePost(\n            id: <p_id>\n        ){\n            \\_id\n            likeCount\n        }\n    }\n")),(0,r.kt)("h3",{id:"unlike-a-post"},"Unlike a post"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    unlikePost(\n        id: ID!\n    ): Post\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It unlikes the post."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"id: ID! - It helps to identify a unique post which needs to be unliked. The ! signifies that the value passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Post"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    mutation{\n        removePost(\n            id: <p_id>\n        ){\n            \\_id\n            likeCount\n        }\n    }\n")),(0,r.kt)("h3",{id:"create-a-comment-in-a-post"},"Create a comment in a post"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    createComment(\n        postId: ID!\n        data: CommentInput!\n    ): Comment\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It creates a comment in a post."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"postId: ID! - It helps to identify a unique post in which a comment needs to be created. The ! signifies that the value passed is non-nullable or NOT NULL."),(0,r.kt)("li",{parentName:"ol"},"data: CommentInput! - It contains data for the comment that needs to be created. The ! signifies that the data passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Comment"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'    mutation{\n        createComment(\n            postId: <p_id>\n            data: {\n                text:"sdg"\n            }\n        ){\n            \\_id\n            text\n        }\n    }\n')),(0,r.kt)("h3",{id:"remove-a-comment-based-on-the-id-provided"},"Remove a comment based on the ID provided"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    removeComment(\n        id: ID!\n    ): Comment\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It removes a comment based on the ID provided."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"id: ID! - It helps to identify a unique comment which needs to be removed. The ! signifies that the value passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Comment"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    mutation{\n        removeComment(\n            id: <c_id>\n        ){\n            \\_id\n            text\n            post{\n                \\_id\n            }\n        }\n    }\n")),(0,r.kt)("h3",{id:"set-the-comment-liked-by-the-user"},"set the comment liked by the user."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    likeComment(\n        id: ID!\n    ): Comment\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It sets the comment liked by the user."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"id: ID! - It helps to identify a unique comment which needs to be liked. The ! signifies that the value passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Comment"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    mutation{\n        likeComment(\n            id: <c_id>\n        ){\n            \\_id\n            text\n        }\n    }\n")),(0,r.kt)("h3",{id:"unlike-the-comment"},"Unlike the Comment"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    unlikeComment(\n        id: ID!\n    ): Comment\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It unlikes the Comment."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"id: ID! - It helps to identify a unique comment which needs to be unliked. The ! signifies that the value passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Comment"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    mutation{\n        unlikeComment(\n            id: <c_id>\n        ){\n            \\_id\n            text\n        }\n    }\n")),(0,r.kt)("h3",{id:"create-a-new-task"},"Create a new task"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    createTask(\n        data: TaskInput\n        eventId: ID!\n    ): Task!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It creates a new task."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"data: taskInput - It contains data for task that needs to be created."),(0,r.kt)("li",{parentName:"ol"},"eventId: ID! - It helps to identify a unique event where task needs to be added. The ! signifies that the value passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Task!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'    mutation{\n        createTask(\n        data:{\n            title:"afsdg"\n        }\n        eventId: <e_id>\n        ){\n            \\_id\n            title\n        }\n    }\n')),(0,r.kt)("h3",{id:"update-task"},"Update task"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    updateTask(\n        id: ID!\n        data: UpdateTaskInput\n    ): Task\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It updates tasks."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"id: ID! - It helps to identify a unique task which needs to be updated. The ! signifies that the value passed is non-nullable or NOT NULL."),(0,r.kt)("li",{parentName:"ol"},"data: UpdateTaskInput - It contains the data that needs to be updated.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Task"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'    mutation{\n        updateTask(\n            id: <t_id>\n            data:{\n                title:"Sdsdf"\n            }\n        ){\n            \\_id\n            title\n            description\n        }\n    }\n')),(0,r.kt)("h3",{id:"remove-task"},"Remove task"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    removeTask(\n        id: ID!\n    ): Task\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It removes the task."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"id: ID! - It helps to identify a unique task which needs to be removed. The ! signifies that the value passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Task"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    mutation{\n        removeTask(\n            id: <t_id>\n        ){\n            \\_id\n            title\n        }\n    }\n")),(0,r.kt)("h3",{id:"create-a-group"},"Create a group"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    createGroup(\n        data: GroupInput!\n    ): Group!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It creates a new group."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"data: GroupInput! - It contains data for the group that needs to be created. The ! signifies that the data passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Group!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    mutation{\n        createGroup(\n            data: {\n                organizationId: <o_id>\n            }\n        ){\n            \\_id\n            organization{\n                members{\n                    firstName\n                }\n            }\n        }\n    }\n")),(0,r.kt)("h3",{id:"send-a-membership-request-to-the-current-user"},"Send a membership request to the current user"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    sendMembershipRequest(\n        organizationId: ID!\n    ): MembershipRequest!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It sends a membership request to the current user."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"organizationId: ID! - It helps to identify a unique organization whose membership request needs to be sent. The ! signifies that the value passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": MembershipRequest!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    mutation{\n        sendMembershipRequest(\n            organizationId: <o_id>\n        ){\n            \\_id\n            user{\n                firstName\n            }\n        }\n    }\n")),(0,r.kt)("h3",{id:"accept-membership-request-and-add-the-user-as-a-member-to-the-organization"},"Accept membership request and add the user as a member to the organization"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"acceptMembershipRequest(\nmembershipRequestId: ID!\n): MembershipRequest!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It accepts the membership request and add the user as a member to the organization."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"membershipRequestId: ID! - It helps to identify a unique membership request that needs to be accepted. The ! signifies that the value passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": MembershipRequest!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    mutation{\n        acceptMembershipRequest(\n            membershipRequestId: <m_id>\n        ){\n            \\_id\n            user{\n                firstName\n            }\n            organization{\n                name\n            }\n        }\n    }\n")),(0,r.kt)("h3",{id:"reject-the-membership-request-for-the-user"},"Reject the membership request for the user"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    rejectMembershipRequest(\n        membershipRequestId: ID!\n    ): MembershipRequest!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It rejects the membership request for the user."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"membershipRequestId: ID! - It helps to identify a unique membership request that needs to be rejected. The ! signifies that the value passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": MembershipRequest!"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example:"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    mutation{\n        rejectMembershipRequest(\n            membershipRequestId: <m_id>\n        ){\n            \\_id\n            user{\n                firstName\n            }\n            organization{\n                name\n            }\n        }\n}\n")),(0,r.kt)("h1",{id:"cancel-the-membership-of-the-user"},"Cancel the membership of the user"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    cancelMembershipRequest(\n        membershipRequestId: ID!\n    ): MembershipRequest!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It cancels the membership of the user."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"membershipRequestId: ID! - It helps to identify a unique membership request that needs to be cancelled. The ! signifies that the value passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": MembershipRequest!"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    mutation{\n        cancelMembershipRequest(\n            membershipRequestId: <m_id>\n            ){\n                \\_id\n                user{\n                    firstName\n                }\n                organization{\n                    name\n                }\n        }\n    }\n")),(0,r.kt)("h3",{id:"block-user"},"Block user"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    blockUser(\n        organizationId: ID!\n        userId: ID!\n    ): User!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It blocks the user."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"organizationId: ID! - It helps to identify a unique organization that needs to block user. The ! signifies that the value passed is non-nullable or NOT NULL."),(0,r.kt)("li",{parentName:"ol"},"userId: ID! - It helps to identify a unique user that needs to blocked. The ! signifies that the value passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": User!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    mutation{\n        blockUser(\n            organizationId: <o_id>\n            userId: <u_id>\n        ){\n            organizationsBlockedBy{\n                name\n            }\n        }\n    }\n")),(0,r.kt)("h3",{id:"unblock-user"},"Unblock user"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    unblockUser(\n        organizationId: ID!\n        userId: ID!\n    ): User!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It unblocks the user."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"organizationId: ID! - It helps to identify a unique organization that needs to unblock user. The ! signifies that the value passed is non-nullable or NOT NULL."),(0,r.kt)("li",{parentName:"ol"},"userId: ID! - It helps to identify a unique user that needs to unblocked. The ! signifies that the value passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": User!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    mutation{\n        unblockUser(\n            organizationId: <o_id>\n            userId: <u_id>\n        ){\n            joinedOrganizations{\n                name\n            }\n        }\n    }\n")),(0,r.kt)("h3",{id:"add-user-profile-image"},"Add user profile image"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    addUserImage(\n        file: Upload!\n    ): User!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It adds an image to the user profile."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"file: Upload! - It is the file that need to be uploaded. The ! signifies that the value passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": User!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    mutation{\n        addUserImage(\n            file: <file_Upload>\n        ){\n            firsrtName\n        }\n    }\n")),(0,r.kt)("h3",{id:"remove-user-profile-image"},"Remove user profile image"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    removeUserImage: User!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It removes the profile image of the current user."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":\nnone"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": User!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    mutation{\n        removeUserImage{\n            \\_id\n            firstName\n        }\n    }\n")),(0,r.kt)("h3",{id:"add-organization-profile-image"},"Add organization profile image"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    addOrganizationImage(\n        file: Upload!\n        organizationId: String!\n    ): Organization!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It adds image to the organization profile."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"file: Upload! - It is the file that need to be uploaded. The ! signifies that the value passed is non-nullable or NOT NULL."),(0,r.kt)("li",{parentName:"ol"},"organizationId: String! - It helps to identify the organization where image needs to be added. The ! signifies that the value passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Organization!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'    mutation{\n        addOrganizationImage(\n            file:<file_Upload>\n            organizationId: "abc"\n        ){\n            image\n        }\n    }\n')),(0,r.kt)("h3",{id:"remove-organization-profile-image"},"Remove organization profile image"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    removeOrganizationImage(\n        organizationId: String!\n    ): Organization!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It removes the image from organization profile."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"organizationId: String! - It helps to identify the organization from which image needs to be removed. The ! signifies that the value passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": Organization!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'    mutation{\n            removeOrganizationImage(\n            organizationId: "abc"\n        ){\n            image\n        }\n    }\n')),(0,r.kt)("h3",{id:"create-a-direct-chat-between-users"},"Create a direct chat between users"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    createDirectChat(\n        data: createChatInput\n    ): DirectChat!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It creates a direct chat between users."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"data: createChatInput - It contains the necessary data for creating a chat.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": DirectChat!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    mutation{\n        createDirectChat(\n            data:{\n                userIds: [<id_1>,<id_2>]\n                organizationId: <o_id>\n            }\n        ){\n            messages{\n                messageContent\n            }\n        }\n    }\n")),(0,r.kt)("h3",{id:"remove-a-direct-chat-between-users"},"Remove a direct chat between users"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    removeDirectChat(\n        chatId: ID!\n        organizationId: ID!\n    ): DirectChat!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It removes the direct chat between the users."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"chatId: ID! - It helps to identify the chat which needs to be removed. The ! signifies that the value passed is non-nullable or NOT NULL."),(0,r.kt)("li",{parentName:"ol"},"organizationId: ID! - It helps to identify a unique organization from which direct chat needs to be removed. The ! signifies that the value passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": DirectChat!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    mutation{\n        removeDirectChat(\n            chatId: <c_id>\n            organizationId: <o_id>\n        ){\n            \\_id\n            messages{\n                messageContent\n            }\n        }\n    }\n")),(0,r.kt)("h3",{id:"send-direct-chat-message"},"Send direct chat message"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    sendMessageToDirectChat(\n        chatId: ID!\n        messageContent: String!\n    ): DirectChatMessage!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It lets the user send a message to direct chat."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"chatId: ID! - It helps to identify the chat where message needs to be sent. The ! signifies that the value passed is non-nullable or NOT NULL."),(0,r.kt)("li",{parentName:"ol"},"messageContent: String! - It contains the data/body of the message.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": DirectChatMessage!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'    mutation{\n        sendMessageToDirectChat(\n            chatId: <c_id>\n            messageContent: "Hello"\n        ){\n            \\_id\n            sender{\n                firstName\n            }\n            receiver{\n                firstName\n            }\n            messageContent\n        }\n    }\n')),(0,r.kt)("h3",{id:"create-a-new-group-chat"},"Create a new group chat"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    createGroupChat(\n        data: createGroupChatInput\n    ): GroupChat!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It creates a new group chat."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"data: createGroupChatInput - It contains the necessary data to create a new group chat.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": GroupChat!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'    mutation{\n        createGroupChat(\n        data:{\n            userIds:[<id_1>,<id_2>,<id_3>]\n            organizationId: <o_id>>\n            title: "New Chat"\n        }\n        ){\n            \\_id\n            messages{\n                messageContent\n            }\n        }\n    }\n')),(0,r.kt)("h3",{id:"remove-group-chat"},"Remove group chat"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    removeGroupChat(\n        chatId: ID!\n    ): GroupChat!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It removes the group chat."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"chatId: ID! - It helps to identify the group chat which needs to be removed. The ! signifies that the value passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": GroupChat!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    mutation{\n        removeGroupChat(\n            chatId: <c_id>\n        ){\n            \\_id\n            creator{\n                firstName\n            }\n        }\n    }\n")),(0,r.kt)("h3",{id:"send-message-to-group-chat-by-user"},"Send message to group chat by user"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    sendMessageToGroupChat(\n        chatId: ID!\n        messageContent: String!\n    ): GroupChatMessage!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It lets the user send a message to the group chat."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"chatId: ID! - It helps to identify the group chat where the user needs to send the message. The ! signifies that the value passed is non-nullable or NOT NULL."),(0,r.kt)("li",{parentName:"ol"},"messageContent: String! - It contains the data/body of the message to be sent on the group chat. The ! signifies that the value passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": GroupChatMessage!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'    mutation{\n        sendMessageToGroupChat(\n            chatId: <c_id>\n            messageContent: "Hey guys!!"\n        ){\n            \\_id\n            messageContent\n        }\n    }\n')),(0,r.kt)("h3",{id:"add-user-to-group-chat"},"Add user to group chat"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    addUserToGroupChat(\n        userId: ID!\n        chatId: ID!\n    ): GroupChat!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It adds a user to a group chat."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"userId: ID! - It helps to identify the user who needs to be added on the group chat. The ! signifies that the value passed is non-nullable or NOT NULL."),(0,r.kt)("li",{parentName:"ol"},"chatId: ID! - It helps to identify the group chat where the user needs to be added. The ! signifies that the value passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": GroupChat!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    mutation{\n            addUserToGroupChat(\n            userId: <u_id>\n            chatId: <c_id>\n        ){\n            \\_id\n            users{\n                firstName\n            }\n        }\n    }\n")),(0,r.kt)("h3",{id:"removes-user-from-group-chat"},"Removes user from group chat"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    removeUserFromGroupChat(\n        userId: ID!\n        chatId: ID!\n    ): GroupChat!\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Description")),": It removes a user from the group chat."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arguments")),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"userId: ID! - It helps to identify the user who needs to be removed from the group chat. The ! signifies that the value passed is non-nullable or NOT NULL."),(0,r.kt)("li",{parentName:"ol"},"chatId: ID! - It helps to identify the group chat from which the user needs to be removed. The ! signifies that the value passed is non-nullable or NOT NULL.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Returns")),": GroupChat!"),(0,r.kt)("p",null,"The ! signifies that the object returned is non-nullable or NOT NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"    mutation{   \n        removeUserFromGroupChat(\n                userId: <u_id>\n                chatId: <c_id>\n            ){\n                \\_id\n                users{\n                    firstName\n                }\n        }\n    }\n")))}g.isMDXComponent=!0}}]);